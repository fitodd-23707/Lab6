
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079e  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e4  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018f  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8e:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
}


void UART_init()
{
	DDRD |= (1 << DDD1);	// Configuración de pines rx y tx
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;				// Configuración del serial
  a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B |= (1 << RXCIE0) | (1<< RXEN0) | (1 << TXEN0);
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 69       	ori	r24, 0x98	; 152
  ae:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	UBRR0 = 103;	// BAUD RATE a 9600
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c2:	08 95       	ret

000000c4 <setup>:

// NON-Interrupt subroutines
// Funciones de Seteo
void setup()
{
	cli();
  c4:	f8 94       	cli
	DDRB = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4

	UART_init();
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
	sei();
  ce:	78 94       	sei
  d0:	08 95       	ret

000000d2 <write_char>:
	UBRR0 = 103;	// BAUD RATE a 9600
}

void write_char(char caracter)
{
	while ((UCSR0A & (1 << UDRE0)) == 0);
  d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d6:	95 ff       	sbrs	r25, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <write_char>
	UDR0 = caracter;
  da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  de:	08 95       	ret

000000e0 <write_str>:
}

void write_str(char* texto)
{
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) != 'ÿ'; i++)
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <write_str+0x12>
	{
		write_char(*(texto+i));
  ec:	0e 94 69 00 	call	0xd2	; 0xd2 <write_char>
	UDR0 = caracter;
}

void write_str(char* texto)
{
	for(uint8_t i = 0; *(texto+i) != 'ÿ'; i++)
  f0:	cf 5f       	subi	r28, 0xFF	; 255
  f2:	f8 01       	movw	r30, r16
  f4:	ec 0f       	add	r30, r28
  f6:	f1 1d       	adc	r31, r1
  f8:	80 81       	ld	r24, Z
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	b9 f7       	brne	.-18     	; 0xec <write_str+0xc>
	{
		write_char(*(texto+i));
	}
}
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	08 95       	ret

00000106 <main>:


// MAIN LOOP
int main(void)
{
	setup();
 106:	0e 94 62 00 	call	0xc4	; 0xc4 <setup>
	sei();
 10a:	78 94       	sei
	write_str("Lab completo");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 70 00 	call	0xe0	; 0xe0 <write_str>
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0xe>

00000116 <__vector_18>:
}


// Interrupt routines
ISR(USART_RX_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	1f 92       	push	r1
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	char temporal = UDR0;
 142:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 146:	89 83       	std	Y+1, r24	; 0x01
	write_str(&temporal);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 70 00 	call	0xe0	; 0xe0 <write_str>
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
